<?php
// Settings to use, when sending via Google's Gmail servers

// Import PHPMailer classes into the global namespace
use PHPMailer\PHPMailer\PHPMailer;

// Vendor folder and the vendor/autoload.php script are generated by Composer; they are not part of PHPMailer.
// require '../vendor/autoload.php';
require 'vendor/autoload.php';

//Create a new PHPMailer instance
$mail = new PHPMailer;

//Tell PHPMailer to use SMTP
$mail->isSMTP();

$mail->CharSet = 'utf-8';

//Enable SMTP debugging
// 0 = off (for production use)
// 1 = client messages
// 2 = client and server messages
$mail->SMTPDebug = 2;

//Set the hostname of the mail server
$mail->Host = 'smtp.gmail.com';
// use
// $mail->Host = gethostbyname('smtp.gmail.com');
// if your network does not support SMTP over IPv6

//Set the SMTP port number - 587 for authenticated TLS, a.k.a RFC4409 SMTP submission
$mail->Port = 587;

//Set the encryption system to use - ssl (deprecated) or tls
$mail->SMTPSecure = 'tls';

//Wether to use SMTP authentication
$mail->SMTPAuth = true;

//Username to use for SMTP authentication - use full email address for gmail
// $mail->Username = "username@gmail.com";
$mail->Username = "";

//Password to use for SMTP authentication
// $mail->Password = "yourpassword";

//Formulaire crée par 
// 
//;
$password = '';
// $password = '';
$mail->Password = $password;
unset($password);
 //The unset line of code is putting the $password variable back to null which means it exists only long enough to be passed to the mail object and no longer.


//Set who the message is to be sent from : address that the e-mail should appear to come from. The optional second parameter to this function is the name that will be displayed as the sender instead of the email address itself : Définir l'expéditeur du message
// $mail->setFrom('from@example.com', 'First Last');
$mail->setFrom('com', '');


//Set an alternative reply-to address
// $mail->addReplyTo('replyto@example.com', 'First Last');
$mail->addReplyTo('', 'First Last');

// an address to which the e-mail will be sent. You must use a valid e-mail here so that you can verify that your PHPMailer test worked. Just your own e-mail address here for this test. As with the setFrom method, you may optionally provide a display name for the recipient.
//Set who the message is to be sent to
// $mail->addAddress('whoto@example.com', 'John Doe');
$mail->addAddress('', 'John Doe');

//Set the subject line
$mail->Subject = 'Formulaire de contact';

//Read an HTML message body from an external file, convert referenced images to embedded, 
//convert HTML into a basic plain-text alternative body
// $mail->msgHTML(file_get_contents('contents.html'), __DIR__);
// $mail->msgHTML(file_get_contents('contact5.php'), dirname(__FILE__));
// p{
				// 	color: red;
				// }
// <td>Bonjour ' . $_POST['genre'] . $_POST['nom'] . $_POST['prenom'] . ',</td>
$body = '
	<html>
		<head>
			<style>
				p.gras, .gras {
					font-weight: bold;
				}
				table {
					border: black solid 1px;
					width: 80vw;
				}
			</style>
		</head>
		<body>
			<img width="170px" src="img/logoChomhier.png" alt="Logo Chomhier">
			<p class="gras">Bonjour ' . $_POST['genre'] . ' '. $_POST['nom'] . ' ' . $_POST['prenom'] . '</b>,<br/>Veuillez trouver ci-dessous le récapitulatif de votre <u>formulaire de contact</u>.</p>
			<table>
				<tr>
					<td class="gras">Votre adresse mail:<br/></td>
				</tr>
				<tr>
					<td>' . $_POST['email'] . '<br/></td>
				</tr>
				<tr>
					<td class="gras">Objet de votre formulaire:<br/></td>
				</tr>
				<tr>
					<td>' . $_POST['objet'] . '<br/></td>
				</tr>
				<tr>	
					<td class="gras">Votre message:<br/></td>
				</tr>
				<tr>	
					<td>' . $_POST['message'] . '<br/></td>
				</tr>
				<tr>	
					<td class="gras">Le nom de votre fichier:<br/></td>
				</tr>
				<tr>	
					<td>' . $_POST['titreFic'] . '<br/></td>
				</tr>	
			</table>
			<p>Nous vous remercions de votre visite sur notre site et espérons vous revoir bientôt dans nos locaux.<br/>Cordialement,<br/>LaChomhier</p>
		</body>
	</html>
';
// create a basic HTML message
$mail->IsHTML(true);
$mail->msgHTML($body);
// $mail->msgHTML(file_get_contents('contact5.php'), __DIR__);

// echo "<pre>";
// var_dump(file_get_contents('contact3.php'));
// echo "</pre>";

// echo "<pre>";
// var_dump($mail);
// echo "</pre>";

// create a basic HTML message
// cette ligne écrase $mail->msgHTML($body);
//$mail->Body     = 'Hi! This is my <b>first e-mail</b> sent through PHPMailer.';

// To make ensure that the recipient will be able to read the e-mail, even if their e-mail client doesn't support HTML, we can add a plain-text version of the message:
//Replace the plain text body with one created manually
$mail->AltBody = 'This is a plain-text message body';

//Attach an image file
$mail->addAttachment('img/phpmailer_mini.png');

//send the message, check for errors
if (!$mail->send()) {
	echo "Mailer Error:" . $mail->ErrorInfo;
} else {
	echo "Message sent !";
	//Section 2: IMAP
	//Uncomment these to save your message in the 'Sent Mail' folder.
	#if (save_mail($mail)) {
	# 	echo "Message saved!"; 
	#}
}

//Section 2: IMAP
//IMAP commands requires the PHP IMAP Extension, found at: https://php.net/manual/en/imap.setup.php
//Function to call which uses the PHP imap_*() functions to save messages: https://php.net/manual/en/book.imap.php
//You can use imap_getmailboxes($imapStream, '/imap/ssl') to get a list of available folders or labels, this can
//be useful if you are trying to get this working on a non-Gmail IMAP server.
function save_mail($mail)
{
    //You can change 'Sent Mail' to any other folder or tag
    $path = "{imap.gmail.com:993/imap/ssl}[Gmail]/Sent Mail";
    //Tell your server to open an IMAP connection using the same username and password as you used for SMTP
    $imapStream = imap_open($path, $mail->Username, $mail->Password);
    $result = imap_append($imapStream, $path, $mail->getSentMIMEMessage());
    imap_close($imapStream);
    return $result;

}

?>
